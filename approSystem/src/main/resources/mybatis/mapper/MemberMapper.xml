<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.project.appro.dao.ImemberDAO">

	<resultMap id="memberMap" type="map">
		<result column="member_id" property="member_id" />
		<result column="member_pw" property="member_pw" />
		<result column="member_name" property="member_name" />
		<result column="member_gender" property="member_gender" />
		<result column="member_dep" property="member_dep" />
		<result column="member_position" property="member_position" />
		<result column="member_join" property="member_join" />
	</resultMap>
	
	<select id="memberCount" parameterType="map" resultType="Integer">
	SELECT 
		count(member_id)
	FROM 
		(
		select
			row_number() over(order by member_id desc ) rnum,
			member_id,
			member_name,
			member_dep,
			DECODE(
				member_position,
				'AA', '부장',
				'BB', '차장',
				'CC', '과장',
				'DD', '대리',
				'EE', '사원'
			) 
			member_position,
			to_char (member_join, 'YYYY-MM-dd' ) member_join
		FROM pas_member
		where 1=1
		<choose>
			<when test="statusType == 'AA'">
				AND member_position like 'AA'
			</when>
			<when test="statusType == 'BB'">
				AND member_position like '%'||#{schText}||'%'
			</when>
		</choose>
		AND (member_id like '%'||#{schText}||'%'
			OR member_name like '%'||#{schText}||'%')
		)
	</select>

	<select id="getMemId" resultType="String">
		SELECT member_id FROM pas_member WHERE member_id = #{param1}
	</select>
	
	<select id="getMemPw" resultType="String">
		SELECT member_pw FROM pas_member WHERE member_id = #{param1}
	</select>
	
	<select id="getMemName" resultType="String">
		SELECT member_name FROM pas_member WHERE member_id = #{param1}
	</select>
	
	<select id="getMemPosition" resultType="String">
		SELECT 
			DECODE
			(
				member_position,
				'AA', '부장',
				'BB', '차장',
				'CC', '과장',
				'DD', '대리',
				'EE', '사원'
			) 
			member_position  
		FROM pas_member 
		WHERE member_id = #{param1}
	</select>
	
	<select id="getMemDep" resultType="String">
		SELECT member_dep FROM pas_member WHERE member_id = #{param1}
	</select>
	
	<select id="getMemList" parameterType="map" resultMap="memberMap">
		SELECT 
			rnum, member_id, member_name, member_dep, member_position, member_join
		FROM 
			(
			select
				row_number() over(order by member_id desc ) rnum,
				member_id,
				member_name,
				member_dep,
				DECODE(
					member_position,
					'AA', '부장',
					'BB', '차장',
					'CC', '과장',
					'DD', '대리',
					'EE', '사원'
				) 
				member_position,
				to_char (member_join, 'YYYY-MM-dd' ) member_join
			FROM pas_member
			where 1=1
			<choose>
				<when test="statusType == 'AA'">
					AND member_position like 'AA'
				</when>
				<when test="statusType == 'BB'">
					AND member_position like 'BB'
				</when>
				<when test="statusType == 'CC'">
					AND member_position like 'CC'
				</when>
				<when test="statusType == 'DD'">
					AND member_position like 'DD'
				</when>
				<when test="statusType == 'EE'">
					AND member_position like 'EE'
				</when>
			</choose>
			AND (member_id like '%'||#{schText}||'%'
				OR member_name like '%'||#{schText}||'%')
			)
		WHERE rnum between #{pageNo} * #{listSize} - #{listSize} +1 AND #{pageNo} * #{listSize} 		
	</select>
	
	<insert id="memberJoin">
	INSERT INTO PAS_MEMBER 
		( 
			member_id, 
			member_name, 
			member_gender, 
			member_dep,
			DECODE(
				member_position,
				'AA', '부장',
				'BB', '차장',
				'CC', '과장',
				'DD', '대리',
				'EE', '사원'
			) 
			member_position 
		)
	VALUES 
		( 
			'pas_memNum_' || PAS_MEMBER_SEQ.nextval, 
			#{member_name}, 
			#{member_gender}, 
			#{member_dep}, 
			#{member_position} 
		)
	</insert>
	
	<update id="memberUpdate">
		UPDATE PAS_MEMBER
		SET  
			member_dep = #{ member_dep }, 
			member_position = #{ member_position } 
		WHERE member_id = #{ member_id }
	</update>
	
	<select id="getMemberInpor" resultType="com.project.appro.dto.MemberDTO">
		SELECT
			member_id,
			member_name,
			member_join,
			member_gender,
			member_dep,
			DECODE(
				member_position,
				'AA', '부장',
				'BB', '차장',
				'CC', '과장',
				'DD', '대리',
				'EE', '사원'
			) 
			member_position
		FROM pas_member 
		WHERE member_id = #{param1}
	</select>
	
	
	<update id="updatePwInfo">
		UPDATE pas_member SET member_pw = #{ param2 } 
		WHERE member_id = #{param1}
	</update>
	
	<delete id="memberDelete">
		DELETE FROM PAS_MEMBER WHERE member_id = #{ param1 }
	</delete>

</mapper>